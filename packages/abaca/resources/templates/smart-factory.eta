export const serverAddresses = <%= JSON.stringify(it.serverAddresses, null, 2) %> as const;

type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;

export type SdkConfig<
  F extends BaseFetch = typeof fetch,
  M extends string = typeof JSON_MIME_TYPE,
  A extends MimeType = typeof DEFAULT_ACCEPT
> = Optional<SdkConfigFor<operations, F, M, A>, 'address'>;

export function createSdk<
  F extends BaseFetch = typeof fetch,
  M extends string = typeof JSON_MIME_TYPE,
  A extends MimeType = typeof DEFAULT_ACCEPT
>(arg?: Address | SdkConfig<F, M, A>): Sdk<F, M, A> {
  const config =
    typeof arg == 'string' || arg instanceof URL || (arg && 'port' in arg)
      ? {address: arg}
      : {address: serverAddresses[0], ...arg};
  return createSdkFor<operations, F, M, A>(allOperations, config);
}
