$id: resource://abaca-openapi/openapi.yaml
openapi: 3.1.0
info:
  title: Operations
  version: 0.0.0
paths:
  /:
    delete:
      operationId: truncateState
      description: Truncate state, useful for tests
      responses:
        '204':
          description: Successful truncation
        '403':
          description: Truncation not allowed
        default:
          $ref: '#/components/responses/Error'
  /attempts/start:
    post:
      operationId: startAttempt
      description: Solve an optimization problem asynchronously
      x-upstream: attempt
      tags:
        - Attempts
      security:
        - token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: schemas/start-attempt-request.yaml
      responses:
        '200':
          description: Started attempt metadata
          content:
            application/json:
              schema:
                $ref: schemas/start-attempt-request.yaml#/$defs/JsonResponse
        default:
          $ref: '#/components/responses/Error'
  /attempts/{attemptUuid}/inputs:
    get:
      operationId: getAttemptInputs
      description: Retrieve an attempt's input data
      x-upstream: attempt
      tags:
        - Attempts
      security:
        - token: []
      parameters:
        - $ref: '#/components/parameters/AttemptUuid'
      responses:
        '200':
          description: Inputs found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolveInputs'
        '404':
          description: No matching attempt found
        default:
          $ref: '#/components/responses/Error'
  /attempts/{attemptUuid}/outputs:
    get:
      operationId: getAttemptOutputs
      description: Retrieve an attempt's output data
      x-upstream: attempt
      tags:
        - Attempts
      security:
        - token: []
      parameters:
        - $ref: '#/components/parameters/AttemptUuid'
      responses:
        '200':
          description: Outputs found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolveOutputs'
        '404':
          description: No matching attempt found
        '409':
          description: >
            The attempt exists but does not have any outputs. This could be
            because it is still pending or was infeasible.
        default:
          $ref: '#/components/responses/Error'
  /attempts/{attemptUuid}/instructions:
    get:
      operationId: getAttemptInstructions
      description: Retrieve an attempt's formatted solver instructions
      x-upstream: attempt
      tags:
        - Attempts
      security:
        - token: []
      parameters:
        - $ref: '#/components/parameters/AttemptUuid'
      responses:
        '200':
          description: Instructions found
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: No matching attempt found
        '409':
          description: >
            The attempt exists but its instructions are not available yet. This
            could be because it is still pending or because its data was
            invalid.
        default:
          $ref: '#/components/responses/Error'
  /solves/inspect/instructions:
    post:
      operationId: inspectSolveInstructions
      description: >
        View a formatted representation of an optimization problem's underlying
        solver instructions
      x-upstream: attempt
      tags:
        - Solves
      security:
        - {}
        - token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [candidate]
              properties:
                candidate:
                  $ref: schemas/solve-candidate.yaml
                priorTargetValues:
                  description: |
                    The values of prior targets, meaningful when using a
                    strategy with epsilon-constraints. The next target will
                    have its instructions returned. Defaults to an empty array
                    (i.e. the first target will be returned).
                  type: array
                  items:
                    type: number
      responses:
        '200':
          description: Formatted solver inputs
          content:
            text/plain:
              schema:
                type: string
        default:
          $ref: '#/components/responses/Error'
  /solves/inspect/summary:
    post:
      operationId: inspectSolveSummary
      description: >
        View summary statistics about a solve
      x-upstream: attempt
      tags:
        - Solves
      security:
        - {}
        - token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [candidate]
              properties:
                candidate:
                  $ref: schemas/solve-candidate.yaml
      responses:
        '200':
          description: Input summary statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolveSummary'
        default:
          $ref: '#/components/responses/Error'
  /solves/run:
    post:
      operationId: runSolve
      description: Solve an optimization problem synchronously
      x-upstream: attempt
      tags:
        - Solves
      security:
        - {}
        - token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: schemas/run-solve-request.yaml
            examples:
              setCover:
                description: A small set cover example
                value:
                  candidate:
                    sources:
                      - >
                        # Set cover

                        + Vertices $$\S^d_{vertices} : V$$
                        + Sets $$\S^d_{sets} : S$$
                        + Coverage $$\S^p_{coverage} : c \in \{0,1\}^{S \times V}$$
                        + Usage $$\S^v_{usage} : \alpha \in \{0,1\}^S$$

                        Minimize sets used:

                        $$
                          \S^o_{setsUsed}: \min \sum_{s \in S} \alpha_s
                        $$

                        All vertices must be covered:

                        $$
                          \S^c_{allCovered}:
                            \forall v \in V, \sum_{s \in S} \alpha_s c_{s, v} \geq 1
                        $$
                    inputs:
                      parameters:
                        - label: coverage
                          entries:
                            - key: [S1, V1]
                            - key: [S2, V1]
                            - key: [S2, V2]
                            - key: [S2, V3]
                            - key: [S3, V1]
                            - key: [S3, V4]
      responses:
        '200':
          description: >
            Solve response. When possible, consider using the
            `application/json-seq` content-type to receive streamed information
            as the solve progresses.

            * Non-incremental information, via `application/json`. The payload
              is sent after the solve completes.
            * Incremental information about the solve, via
              `application/json-seq`. Messages will be streamed as the solve
              progresses.
          content:
            application/json:
              schema:
                $ref: schemas/run-solve-request.yaml#/$defs/JsonResponse
            application/json-seq:
              schema:
                $ref: schemas/run-solve-request.yaml#/$defs/JsonSeqResponse
        default:
          $ref: '#/components/responses/Error'
components:
  parameters:
    AttemptUuid:
      name: attemptUuid
      in: path
      required: true
      schema:
        type: string
  responses:
    Error:
      description: Generic error
      content:
        application/json:
          schema:
            type: object
            additionalProperties: true
        text/plain:
          schema:
            type: string
  schemas:
    ExtendedFloat:
      $ref: schemas/extended-float.yaml
    SolveCandidate:
      $ref: schemas/solve-candidate.yaml?embed=*
    SolveInputs:
      $ref: schemas/solve-inputs.yaml?embed=*
    SolveStrategy:
      $ref: schemas/solve-strategy.yaml?embed=*
    SolveOptions:
      $ref: schemas/solve-options.yaml
    SolveSummary:
      $ref: schemas/solve-summary.yaml?embed=*
    SolveOutcome:
      $ref: schemas/solve-outcome.yaml?embed=SolveStatus,TargetOutcome
    SolveOutputs:
      $ref: schemas/solve-outputs.yaml?embed=*
    ReifyProgress:
      $ref: schemas/run-solve-request.yaml#/$defs/ReifyProgress
    SolveProgress:
      $ref: schemas/run-solve-request.yaml#/$defs/SolveProgress
  securitySchemes:
    token:
      type: http
      scheme: bearer
tags:
  - name: Solves
    description: Direct solving
  - name: Attempts
    description: Queued solving
